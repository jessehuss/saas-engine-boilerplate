---
import { getCollection } from 'astro:content';
import { loadLayout } from '../../lib/templateLoader';
import siteConfig from '../../config/site.config';
import { formatDate } from '../../lib/utils';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { entry: post },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const BaseLayout = await loadLayout('BaseLayout');
const primaryColor = siteConfig.primaryColor;
const template = siteConfig.template;
const publishedTime = entry.data.date.toISOString();
---

<BaseLayout 
  siteConfig={siteConfig} 
  title={entry.data.title} 
  description={entry.data.description || ''}
  image={entry.data.image}
  type="article"
  publishedTime={publishedTime}
  author={entry.data.author}
  tags={entry.data.tags}
>
  <article class={`py-32 ${
    template === 'dark' || template === 'tech' ? 'bg-slate-950' 
    : template === 'gradient' ? 'bg-gradient-to-br from-gray-50 to-gray-100' 
    : template === 'playful' ? 'bg-gradient-to-br from-pink-50 via-purple-50 to-blue-50'
    : template === 'professional' ? 'bg-gray-50'
    : template === 'portfolio' ? 'bg-gradient-to-br from-purple-50 via-teal-50 to-orange-50'
    : 'bg-white'
  }`}>
    <div class="container-custom max-w-4xl">
      <header class="mb-16 text-center">
        <time class={`text-sm ${template === 'dark' || template === 'tech' ? 'text-slate-500' : 'text-gray-500'}`} datetime={entry.data.date.toISOString()}>
          {formatDate(entry.data.date)}
        </time>
        
        <h1 class={`text-5xl md:text-6xl font-bold mt-4 mb-6 ${template === 'dark' || template === 'tech' ? 'text-white' : 'text-gray-900'}`} style={{ color: primaryColor }}>
          {entry.data.title}
        </h1>
        
        {entry.data.description && (
          <p class={`text-xl max-w-2xl mx-auto ${template === 'dark' || template === 'tech' ? 'text-slate-400' : 'text-gray-600'}`}>
            {entry.data.description}
          </p>
        )}
        
        <div class={`mt-8 flex items-center justify-center gap-4 ${template === 'dark' || template === 'tech' ? 'text-slate-400' : 'text-gray-600'}`}>
          <span>By {entry.data.author}</span>
          {entry.data.tags && entry.data.tags.length > 0 && (
            <div class="flex gap-2">
              {entry.data.tags.map((tag: string) => (
                <span class={`px-4 py-2 rounded-full text-sm font-medium ${
                  template === 'dark' || template === 'tech'
                    ? 'bg-slate-800 text-slate-300 border border-slate-700' 
                    : template === 'playful'
                    ? 'bg-primary/10 text-primary border-2 border-primary'
                    : template === 'gradient'
                    ? 'bg-white/90 backdrop-blur-sm border border-gray-200'
                    : template === 'portfolio'
                    ? 'bg-white rounded-full border border-gray-200'
                    : 'bg-gray-100 text-gray-700'
                }`} style={template === 'playful' ? { 'border-color': primaryColor, 'color': primaryColor } : template === 'gradient' ? { 'color': primaryColor, 'border-color': `${primaryColor}20` } : {}}>
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      </header>
      
      <div class={`prose prose-lg max-w-none ${template === 'dark' || template === 'tech' ? 'prose-invert' : ''}`}>
        <Content />
      </div>
      
      <div class={`mt-16 pt-8 ${
        template === 'dark' || template === 'tech' ? 'border-t border-slate-800' 
        : template === 'gradient' ? 'border-t border-gray-200/50' 
        : 'border-t border-gray-200'
      }`}>
        <a href="/blog" class="hover:underline inline-flex items-center gap-2 transition-colors font-medium" style={{ color: primaryColor }}>
          ‚Üê Back to Blog
        </a>
      </div>
    </div>
  </article>
</BaseLayout>
